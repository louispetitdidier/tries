# -*- coding: utf-8 -*-
"""streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z99SO7VhKpN0IdaAJ5FL2J7m44PDkFc5
"""

import streamlit as st
import pandas as pd
from azure.storage.blob import BlobServiceClient
from io import BytesIO
import pyarrow.parquet as pq

# Azure Blob Storage config
ACCOUNT_URL = "https://iesstsabdbaa.blob.core.windows.net/"
CONTAINER_NAME = "group7"
RIDE_PATH = "optimized_ride_data"
DRIVER_PATH = "optimized_driver_data"
ACCESS_KEY = "yfqMW8gf8u+M5pOW33Q5gtRTFBJQXStVK4K2rlCVVzxlrRG21Sh7MVj06uExoL86Npb7HWWgxYUe+ASthUr6/g=="  # Same as in your notebook

# Connect to Azure Blob Storage
blob_service_client = BlobServiceClient(account_url=ACCOUNT_URL, credential=ACCESS_KEY)

def load_parquet_from_blob(path_prefix):
    container_client = blob_service_client.get_container_client(CONTAINER_NAME)
    blob_list = container_client.list_blobs(name_starts_with=path_prefix)

    dataframes = []
    for blob in blob_list:
        blob_client = container_client.get_blob_client(blob.name)
        stream = BytesIO(blob_client.download_blob().readall())
        try:
            df = pd.read_parquet(stream)
            dataframes.append(df)
        except Exception:
            continue

    if dataframes:
        return pd.concat(dataframes, ignore_index=True)
    return pd.DataFrame()

st.set_page_config(page_title="Real-Time Ride & Driver Dashboard", layout="wide")
st.title("\U0001F6A6 Real-Time Ride & Driver Dashboard")

# Load latest data from Azure Blob Storage
ride_df = load_parquet_from_blob(RIDE_PATH)
driver_df = load_parquet_from_blob(DRIVER_PATH)

# RIDE ANALYSIS
if not ride_df.empty:
    st.subheader("\U0001F4CA Ride Requests")
    col1, col2 = st.columns(2)

    with col1:
        st.metric("Total Rides", len(ride_df))
        st.write("### Status Counts")
        st.bar_chart(ride_df["status"].value_counts())

    with col2:
        st.write("### Avg Estimated Price by Ride Type")
        st.bar_chart(ride_df.groupby("ride_type")["estimate_price"].mean())

# DRIVER ANALYSIS
if not driver_df.empty:
    st.subheader("\U0001F697 Driver Status")
    col1, col2 = st.columns(2)

    with col1:
        st.metric("Total Drivers", len(driver_df))
        st.write("### Status Counts")
        st.bar_chart(driver_df["status"].value_counts())

    with col2:
        st.write("### Vehicle Types")
        st.bar_chart(driver_df["vehicle_type"].value_counts())

# Show raw data
with st.expander("\U0001F50D Sample Ride Data"):
    st.dataframe(ride_df.head(10))

with st.expander("\U0001F50D Sample Driver Data"):
    st.dataframe(driver_df.head(10))